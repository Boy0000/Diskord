plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.31'
    id 'kotlinx-serialization' version '1.3.31'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
    id "org.jetbrains.dokka" version "0.9.18"
}

group = 'com.jessecorbett'
version = diskordVersion

dokka {
    outputFormat = "html"
    outputDirectory = "public"

    noStdlibLink = false
    noJdkLink = false

    kotlinTasks {
        // dokka fails to retrieve sources from MPP-tasks so they must be set empty to avoid exception
        []
    }
    sourceRoot {
        path = "src/commonMain/kotlin"
        platforms = ["Common"]
    }
    sourceRoot {
        path = "src/jvmMain/kotlin"
        platforms = ["JVM"]
    }
//    sourceRoot {
//        path = "src/jsMain/kotlin"
//        platforms = ["JS"]
//    }

    linkMapping {
        dir = "src/commonMain/kotlin"
        url = "https://gitlab.com/jesselcorbett/Diskord/tree/master/src/commonMain/kotlin"
        suffix = "#L"
    }
    linkMapping {
        dir = "src/jvmMain/kotlin"
        url = "https://gitlab.com/jesselcorbett/Diskord/tree/master/src/jvmMain/kotlin"
        suffix = "#L"
    }
//    linkMapping {
//        dir = "src/jsMain/kotlin"
//        url = "https://gitlab.com/jesselcorbett/Diskord/tree/master/src/jsMain/kotlin"
//        suffix = "#L"
//    }
}

def pomConfig = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    developers {
        developer {
            id 'jesse corbett'
            name 'Jesse Corbett'
            email 'jesselcorbett@gmail.com'
        }
    }

    scm {
        url 'https://gitlab.com/jesselcorbett/diskord'
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://kotlin.bintray.com/kotlinx" } // kotlinx.serialization
}

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm') {
            mavenPublication {
                artifactId 'diskord'
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', 'A Kotlin wrapper around the Discord API')
                    root.appendNode('name', 'Diskord')
                    root.appendNode('url', 'https://gitlab.com/jesselcorbett/Diskord')
                    root.children().last() + pomConfig
                }
            }
        }
//        fromPreset(presets.js, 'js')
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion"
                api 'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.2.1'
                api 'org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.11.0'
                implementation 'io.github.microutils:kotlin-logging-common:1.6.26'
                implementation "io.ktor:ktor-client-core:$ktorVersion"
                implementation "io.ktor:ktor-client-logging:$ktorVersion"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlinVersion"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlinVersion"
                implementation 'com.willowtreeapps.assertk:assertk-common:0.13'
                implementation 'io.mockk:mockk-common:1.9.2'
            }
        }

        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
                api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.1'
                api 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.11.0'
                implementation 'io.github.microutils:kotlin-logging:1.6.26'
                implementation 'org.slf4j:slf4j-api:1.7.26'
                implementation "io.ktor:ktor-client-cio:$ktorVersion"
                implementation "io.ktor:ktor-client-okhttp:$ktorVersion"
                implementation "io.ktor:ktor-client-logging-jvm:$ktorVersion"
                implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
                implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
            }
        }
        jvmTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-junit5'
                implementation 'org.junit.jupiter:junit-jupiter-engine:5.4.0'
                implementation 'com.willowtreeapps.assertk:assertk-jvm:0.13'
                implementation 'io.mockk:mockk:1.9.2'
                implementation 'org.slf4j:slf4j-simple:1.7.26'
            }
        }

//        jsMain {
//            dependencies {
//                implementation "org.jetbrains.kotlin:kotlin-stdlib-js:${kotlinVersion}"
//                implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:0.10.0'
//                implementation 'io.github.microutils:kotlin-logging-js:1.6.25'
//            }
//        }
//        jsTest {
//            dependencies {
//                implementation "org.jetbrains.kotlin:kotlin-test-js:${kotlinVersion}"
//            }
//        }
    }
}

jvmTest {
    useJUnitPlatform()

    systemProperty("com.jessecorbett.diskord.debug", project.findProperty("com.jessecorbett.diskord.debug") ?: false)
}

bintray {
    user = System.getenv("BINTRAY_USER")
    key = System.getenv("BINTRAY_KEY")

    publish = true

    pkg {
        repo = 'diskord'
        name = 'diskord'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://gitlab.com/jesselcorbett/Diskord'
        publications = ['jvm']
        version {
            name = diskordVersion
        }
    }
}

publishing {
    repositories {
        maven {
            name = "gitlab"
            url = "https://gitlab.com/api/v4/projects/${System.getenv("CI_PROJECT_ID")}/packages/maven"
            credentials(HttpHeaderCredentials) {
                name = "Job-Token"
                value = System.getenv("CI_JOB_TOKEN")
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}
