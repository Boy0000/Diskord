
plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.11'
    id 'org.jetbrains.dokka' version '0.9.17'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.4'
}

group = 'com.jessecorbett'
version = diskordVersion

repositories {
    mavenCentral()
}

def pomConfig = {
    licenses = {
        license = {
            name = 'The Apache Software License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
        }
    }
    
    developers = {
        developer = {
            id = 'jesse corbett'
            name = 'Jesse Corbett'
            email = 'jesselcorbett@gmail.com'
        }
    }

    scm = {
        url = 'https://gitlab.com/jesselcorbett/Diskord'
    }
}

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm') {
            mavenPublication {
                artifactId = 'diskord' // TODO: Remove this declaration to export -jvm versions when we make a breaking change to add js support
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', 'A Kotlin wrapper around the Discord API')
                    root.appendNode('name', 'Diskord')
                    root.appendNode('url', 'https://gitlab.com/jesselcorbett/Diskord')
                    root.children().last() + pomConfig
                }
            }
        }
        fromPreset(presets.js, 'js')
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.1.0'
            }
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            dependsOn commonMain

            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                implementation 'org.jetbrains.kotlin:kotlin-reflect'
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.0'
                implementation 'com.squareup.okhttp3:okhttp:3.12.1'
                implementation 'com.fasterxml.jackson.core:jackson-core:2.9.8'
                implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.8'
                implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8'
                implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8'
                implementation 'org.slf4j:slf4j-api:1.7.25'
            }
        }
        jvmTest {
            dependsOn jvmMain

            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'

                implementation 'org.jetbrains.kotlin:kotlin-test-junit5'
                implementation 'org.junit.jupiter:junit-jupiter-api:5.3.2'
                implementation 'org.junit.jupiter:junit-jupiter-params:5.3.2'
                implementation 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
                implementation 'com.willowtreeapps.assertk:assertk-jvm:0.12'
                implementation 'io.mockk:mockk:1.9'
            }
        }
        jsMain { /* ... */ }
        jsTest { /* ... */ }
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = 'public'
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = 'build/docs'
    inputs.dir 'src/main/kotlin'
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from 'build/docs'
}

bintray {
    user = 'jessecorbett'
    key = 'de1c72574d8329ed9b762d3cd2b327f4a6c6d5a9'
    
    publish = true

    pkg {
        repo = 'diskord'
        name = 'diskord'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://gitlab.com/jesselcorbett/Diskord'
        publications = ['jvm']
        version {
            name = diskordVersion
        }
    }
}

publishing {
    repositories {
        maven {
            name = 'gitlab'
            url = "https://gitlab.com/api/v4/projects/${System.getenv('CI_PROJECT_ID')}/packages/maven"
            credentials(HttpHeaderCredentials) {
                name = 'Job-Token'
                value = System.getenv('CI_JOB_TOKEN')
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}
